import { Board } from "./board";
import { Ship } from "./ships";

describe("Boardgame", () => {
  let board;
  let ship;

  beforeEach(() => {
    board = new Board();
    ship = { carrier: new Ship("carrier", 5) };
  });

  test("returns the board", () => {
    expect(board.getBoard()).toEqual([
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
    ]);
  });

  test("places ship horizontally on the board", () => {
    board.placeShip(0, 0, ship.carrier, "horizontal");
    expect(board.getBoard()).toEqual([
      [
        "carrier",
        "carrier",
        "carrier",
        "carrier",
        "carrier",
        "",
        "",
        "",
        "",
        "",
      ],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
    ]);
  });

  test("places ship vertically on the board", () => {
    board.placeShip(0, 0, ship.carrier, "vertical");
    expect(board.getBoard()).toEqual([
      ["carrier", "", "", "", "", "", "", "", "", ""],
      ["carrier", "", "", "", "", "", "", "", "", ""],
      ["carrier", "", "", "", "", "", "", "", "", ""],
      ["carrier", "", "", "", "", "", "", "", "", ""],
      ["carrier", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
    ]);
  });

  test("attack blank square on the board", () => {
    board.receiveAttack(0, 0);
    expect(board.getBoard()).toEqual([
      ["O", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
      ["", "", "", "", "", "", "", "", "", ""],
    ]);
  });

  test("attack ship on the board", () => {
    board.placeShip(0, 0, ship.carrier, "horizontal");
    board.receiveAttack(0, 0);
    expect(board.getBoard()[0][0]).toEqual("X");
  });
});
